{"name":"Epaxos","tagline":"","body":"EPaxos\r\n======\r\n\r\n\r\n### What is EPaxos?\r\n\r\n\r\nEPaxos is an efficient, leaderless replication protocol. The name stands for *Egalitarian Paxos* -- EPaxos is based\r\non the Paxos consensus algorithm. As such, it can tolerate up to F concurrent replica failures with 2F+1 total replicas.\r\n\r\n### How does EPaxos differ from Paxos and other Paxos variants?\r\n\r\nTo function effectively as a replication protocol, Paxos has to rely on a stable leader replica (this optimization is known as Multi-Paxos). The leader can become a bottleneck for performance: it has to handle more messages than the other replicas, and remote clients have to contact the leader, thus experiencing higher latency. Other Paxos variants either also rely on a stable leader, or have a pre-established scheme that allows different replicas to take turns in proposing commands (such as Mencius). This latter scheme\r\nsuffers from tight coupling of the performance of the system from that of every replica -- i.e., the system runs at the speed of the slowest replica.\r\n\r\nEPaxos is an efficient, leaderless protocol. It provides **strong consistency with optimal wide-area latency, perfect load-balancing across replicas (both in the local and the wide area), and constant availability for up to F failures**. EPaxos also decouples the performance of the slowest replicas from that of the fastest, so it can better tolerate slow replicas than previous protocols.\r\n\r\n### How does EPaxos work?\r\n\r\nWe have [an SOSP 2013 paper](http://dl.acm.org/ft_gateway.cfm?id=2517350&ftid=1403953&dwn=1) that describes EPaxos in detail.\r\n\r\nA simpler, more straightforward explanation is coming here soon.\r\n\r\n\r\n### What is in this repository?\r\n\r\nThis repository contains the Go implementations of:\r\n\r\n* Egalitarian Paxos (EPaxos), a new distributed consensus algorithm based on\r\nPaxos EPaxos achieves three goals: (1) availability *without interruption*\r\nas long as a simple majority of replicas are reachable---its availability is not\r\ninterrupted when replicas crash or fail to respond; (2) uniform load balancing\r\nacross all replicas---no replicas experience higher load because they have\r\nspecial roles; and (3) optimal commit latency in the wide-area when tolerating\r\none and two failures, under realistic conditions. Egalitarian Paxos is to our\r\nknowledge the first distributed consensus protocol to achieve all of these goals\r\nefficiently: requiring only a simple majority of replicas to be non-faulty,\r\nusing a number of messages linear in the number of replicas to choose a command,\r\nand committing commands after just one communication round (one round trip) in\r\nthe common case or after at most two rounds in any case.\r\n\r\n* (classic) Paxos\r\n\r\n* Mencius\r\n\r\n* Generalized Paxos\r\n\r\n\r\nThe struct marshaling and unmarshaling code was generated automatically using\r\nthe tool available at: https://code.google.com/p/gobin-codegen/\r\n\r\n\r\nAUTHORS:\r\n\r\nIulian Moraru, David G. Andersen -- Carnegie Mellon University\r\n\r\nMichael Kaminsky -- Intel Labs\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}